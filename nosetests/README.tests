These tests are run with python proboscis, which extends nose and
unittests.

Test writers:

Use the tests in this directory as examples.

New test modules will begin about the same way:

    from utils import RTAPITestCase, check_hal_clean
    from proboscis import test, before_class, after_class
    from nose.tools import assert_equal, assert_almost_equal, assert_in, \
	assert_greater, assert_false, assert_true, \
	assert_is_none, assert_is_not_none, assert_is_instance, \
	assert_raises

    from machinekit import hal

    @test(groups=["std_comps"])
    class MyTestClass(RTAPITestCase):

        @test
	def mytest(self):
	[...]

The `RTAPITestCase` class ensures that a persistent RTAPI connection
object is open at `self.rtapi`.

The `check_hal_clean` function checks that HAL objects allocated
during the test, like ring buffers or signals, have all been
deallocated so the next test has a clean environment.  Should be
called at the end of a test decorated as `@after_class`.

The tests are organized into groups with hierarchical dependencies.
This guarantees both order of execution, and if a test fails,
dependent tests will be skipped.

Tests of basic RTAPI or HAL functionality belong in the low-level
`rtapi` or `hal` groups.  Components belong in the `std_comps` group,
which depends on the low-level groups.

Plug new modules into the tests by importing the module in
`run_tests.py`.

For proboscis documentation, see here:

  http://pythonhosted.org/proboscis/

The list of nose test assertions:

  https://docs.python.org/2/library/unittest.html#assert-methods
